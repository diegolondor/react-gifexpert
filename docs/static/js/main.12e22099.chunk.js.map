{"version":3,"sources":["components/AddCategory.js","helpers/gifHelper.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","then","r","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","useFetchGifs","gif","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMA6BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAevC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,IACAF,GAAc,SAACO,GAAD,OAAiBL,GAAjB,mBAAgCK,OAC9CJ,EAAc,MAKlB,SACI,uBAAOK,KAAK,OAAOC,MAAOP,EAAYQ,SAdpB,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,a,uBCPlBG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAC3FH,GAFe,sBAIII,MAAMF,GAAKG,MAAK,SAACC,GAAD,OAAOA,EAAEC,UAJ7B,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAKS,EAAIG,OAAOC,iBAAiBb,QATtB,kBAaZO,GAbY,2CAAH,sDCEPO,EAAc,SAAC,GAAa,IAAXL,EAAU,EAAVA,IAC1B,OACI,sBAAKM,UAAU,uDAAf,UACI,qBAAKC,IAAKP,EAAIT,IAAKiB,IAAKR,EAAIE,QAC5B,4BAAIF,EAAIE,YCoBLO,EAtBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZZ,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAetC,OATAC,qBAAU,WACNzB,EAAQC,GAAUK,MAAK,SAACS,GACpBS,EAAS,CACLf,KAAMM,EACNO,SAAS,SAGlB,CAACrB,IAEGsB,EDb2BG,CAAazB,GAAjCc,EADgB,EACtBN,KAAca,EADQ,EACRA,QAEtB,OACI,qCACI,6BAAKrB,IACJqB,GAAW,4CACZ,qBAAKJ,UAAU,YAAf,SACI,6BACKH,EAAOJ,KAAI,SAACgB,GAAD,OACR,cAAC,EAAD,CAA0Bf,IAAKe,GAAbA,EAAId,eEO/Be,EAjBM,WAAO,IAAD,EACavC,mBAAS,CAAC,kBADvB,mBAChBM,EADgB,KACJP,EADI,KAGvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACKO,EAAWgB,KAAI,SAACV,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTlC4B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.12e22099.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue) {\n            setCategories((categories) => [inputValue, ...categories]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type='text' value={inputValue} onChange={handleInputChange} />\n        </form>\n    );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=dFhXcjMygpZYcZG7rku2JMuLrCg5Zhgp&q=${encodeURI(\n        category,\n    )}&limit=10`;\n    const { data } = await fetch(url).then((r) => r.json());\n    const gifs = data.map((img) => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        };\n    });\n\n    return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ img }) => {\n    return (\n        <div className='card animate__animated animate__fadeIn animate__fast'>\n            <img src={img.url} alt={img.title}></img>\n            <p>{img.title}</p>\n        </div>\n    );\n};\n","import PropTypes from 'prop-types';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {loading && <p>Cargando...</p>}\n            <div className='card-grid'>\n                <ol>\n                    {images.map((gif) => (\n                        <GifGridItem key={gif.id} img={gif} />\n                    ))}\n                </ol>\n            </div>\n        </>\n    );\n};\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/gifHelper';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGifs(category).then((images) => {\n            setState({\n                data: images,\n                loading: false,\n            });\n        });\n    }, [category]);\n\n    return state;\n};\n","import { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Dragon Ball Z']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {categories.map((category) => (\n                    <GifGrid key={category} category={category} />\n                ))}\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}